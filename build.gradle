import static org.gradle.api.JavaVersion.VERSION_1_7

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'fatjar'
apply plugin: 'application'

idea{
    module{
        name = "PSRegression"
    }

    project {
        jdkName = '1.7'
        languageLevel = '1.7'
    }
}

buildscript {
    dependencies {
        classpath fileTree(dir: 'lib',
                includes: [
                        'gradle-fatjar-plugin-0.2-rc1.jar'
                ]
        )
    }
}

allprojects {
    def versionNumber = System.getenv("BUILD_NUMBER")
    if (versionNumber) {
        project.version = versionNumber
    } else {
        project.version = 'developer-build'
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {

    compile fileTree(dir: 'lib', include: '*.jar')
    testCompile fileTree(dir: 'lib', include: '*.jar')
}


mainClassName = 'com.tesco.services.PSRegression'

fatJar {
    baseName = 'ps-regression'
    manifest {
        attributes 'Main-Class': mainClassName
    }
    exclude 'META-INF/.DSA', 'META-INF/.RSA', 'META-INF/*.SF'
}

task zip(type: Zip) {
    baseName = 'ps-regression'
    from fatJar.outputs.files
    from ('.'){
        include "*.yml"
        include 'runService'
        include 'version'
    }
}

// ensure that test resources (src/test/resources) are added to CLASSPATH;
// see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
// http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath
sourceSets {
    main {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
    test {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
}

test {
    systemProperties 'environment': System.getProperty("environment")
    jvmArgs '-XX:-UseSplitVerifier'
    include '**/**'

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

}

run {
    def environment = System.getProperty('environment')
    if (!environment){
        environment = 'local'
    }
    args 'server', environment + '.yml'
}


// see https://github.com/Mapvine/gradle-cobertura-plugin
//cobertura {
//    format = 'xml'
//    includes = ['**/*.java']
//}
